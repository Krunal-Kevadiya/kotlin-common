/*
 *
 *  Copyright 2018 Captain App for Linker Logic Technologies, Inc.
 *  Develop By Krunal Kevadiya
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 * /
 */

/**
 * Set up Checkstyle, Findbugs, PMD, Lint, Detekt, Ktlint and Spotless to perform extensive code analysis.
 *
 * Gradle tasks added:
 * - checkstyle
 * - findbugs
 * - pmd
 *
 * The three tasks above are added as dependencies of the check task so running check will
 * run all of them.
 */
apply from: '../settings/dependencies.gradle'

apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'com.diffplug.gradle.spotless'
apply plugin: 'jacoco-android'

def qualityConfigDir = "$project.rootDir/settings/codequality"
def reportsDir = "$project.rootDir/settings/reports"
def sourceDir = "$project.rootDir"

//CheckStyle
checkstyle {
    toolVersion = '8.11'
}

task checkstyle(type: Checkstyle, group: 'Verification', description: 'Runs code style checks') {
    showViolations = true
    configFile file("$qualityConfigDir/checkstyle/checkstyle.xml")
    configProperties = ["suppressionFile": project(':').file("$qualityConfigDir/checkstyle/suppressions.xml")]

    source 'src'
    include '**/*.java'
    exclude '**/model/**'
    exclude '**/AppLogger.java'
    exclude '**/gen/**'
    exclude '**/test/**'
    exclude '**/androidTest/**'
    exclude '**/R.java'
    exclude '**/BuildConfig.java'
    reports {
        xml.enabled = true
        html.enabled = true
        xml.setDestination(project.file("$reportsDir/checkstyle/checkstyle.xml"))
        html.setDestination(project.file("$reportsDir/checkstyle/checkstyle.html"))
    }

    //classpath = files()
    classpath = files("$sourceDir/app", "$sourceDir/kotlinlibrary")
}

//Find Bugs
task findbugs(type: FindBugs, group: 'Verification', description: 'Inspect java bytecode for bugs') {
    ignoreFailures = false
    effort = "max"
    reportLevel = "high"
    excludeFilter = new File("$qualityConfigDir/findbugs/findbugs.xml")

    classes = files("$sourceDir/common/build/intermediates/classes", "$sourceDir/customer/build/intermediates/classes", "$sourceDir/provider/build/intermediates/classes")
    classpath = files()
    source = fileTree('src/main/java')

    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = false
        xml.setDestination(project.file("$reportsDir/findbugs/findbugs.xml"))
        html.enabled = true
        html.setDestination(project.file("$reportsDir/findbugs/findbugs.html"))
    }
}

//PMD
task pmd(type: Pmd, group: 'Verification', description: 'Inspect sourcecode for bugs') {
    ruleSetFiles = files("$qualityConfigDir/pmd/ruleset.xml")
    ignoreFailures = false
    ruleSets = []

    source fileTree('src/main/java')
    include '**/*.java'
    exclude('**/gen/**', '**/debug/**')
    exclude '**/model/**'

    reports {
        xml.enabled = true
        xml.setDestination(project.file("$reportsDir/pmd/pmd.xml"))
        html.enabled = true
        html.setDestination(project.file("$reportsDir/pmd/pmd.html"))
    }
}

//Lint
android {
    lintOptions {
        // Turns off checks for the issue IDs you specify.
        disable 'NewApi', 'RestrictedApi', 'TypographyFractions', 'TypographyQuotes'
        // Turns on checks for the issue IDs you specify. These checks are in
        // addition to the default lint checks.
        enable 'RtlHardcoded', 'RtlCompat', 'RtlEnabled'
        // To enable checks for only a subset of issue IDs and ignore all others,
        // list the issue IDs with the 'check' property instead. This property overrides
        // any issue IDs you enable or disable using the properties above.
        check 'InlinedApi', 'HandlerLeak'
        // If set to true, turns off analysis progress reporting by lint.
        quiet true

        abortOnError true
        xmlReport true
        htmlReport true
        xmlOutput project.file("$reportsDir/lint/lints.xml")
        htmlOutput project.file("$reportsDir/lint/lints.html")
        lintConfig file("${qualityConfigDir}/lint/javalintrc.xml")
    }

    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            outputs.upToDateWhen { false }
            showStandardStreams = true
        }
        jvmArgs '-noverify'
    }
}

//Ktlint
configurations {
    ktlint
}

dependencies {
    ktlint "com.github.shyiko:ktlint:0.29.0"
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "--reporter=plain?group_by_file", "--reporter=checkstyle,output=${reportsDir}/ktlint/ktlint.xml",
        "--reporter=json,output=${reportsDir}/ktlint/ktlint.json",
        "--reporter=plain,output=${reportsDir}/ktlint/ktlint.txt", "src/**/*.kt"
}

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "--reporter=plain?group_by_file", "--reporter=checkstyle,output=${reportsDir}/ktlint/format/ktlint.xml",
        "--reporter=json,output=${reportsDir}/ktlint/format/ktlint.json",
        "--reporter=plain,output=${reportsDir}/ktlint/format/ktlint.txt", "src/**/*.kt", "-F"
}

//Spotless
spotless {
    java {
        target '**/*.java'
        googleJavaFormat()
        licenseHeaderFile "$qualityConfigDir/spotless/copyright.java"
    }
    kotlin {
        target "**/*.kt"
        ktlint()
        licenseHeaderFile "$qualityConfigDir/spotless/copyright.kt"
    }
}

//detekt
configurations {
    detekt
}

dependencies {
    detekt 'io.gitlab.arturbosch.detekt:detekt-cli:1.0.0.RC9'
}

task detekt(type: JavaExec, group: 'verification') {
    main = "io.gitlab.arturbosch.detekt.cli.Main"
    classpath = configurations.detekt
    def input = "$sourceDir"
    def config = "$qualityConfigDir/detekt/detekt.yml"
    def configResource = "/detekt.yml"
    def filters = ".*test.*, .*/resources/.*"
    def output = "$reportsDir/detekt"
    def outputName = "detekt"
    def baseline = "$project.projectDir/reports/baseline.xml"

    def params = ['-i', input, '-c', config, '-cr', configResource, '-f', filters, '-r', output, '-on', outputName, '-b', baseline]
    args(params)
}

//Jacoco
def fileFilter = [
    '**/*Parcel.class',
    '**/*$CREATOR.class',
    '**/*Test*.*',
    '**/AutoValue_*.*',
    '**/*JavascriptBridge.class',
    '**/R.class',
    '**/R$*.class',
    '**/Manifest*.*',
    'android/**/*.*',
    '**/BuildConfig.*',
    '**/*$ViewBinder*.*',
    '**/*$ViewInjector*.*',
    '**/Lambda$*.class',
    '**/Lambda.class',
    '**/*Lambda.class',
    '**/*Lambda*.class',
    '**/*$InjectAdapter.class',
    '**/*$ModuleAdapter.class',
    '**/*$ViewInjector*.class',
    '**/*_MembersInjector.class', //Dagger2 generated code
    '*/*_MembersInjector*.*', //Dagger2 generated code
    '**/*_*Factory*.*', //Dagger2 generated code
    '**/*Component*.*', //Dagger2 generated code
    '**/*Module*.*' //Dagger2 generated code
]

def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
def mainSrc = "${project.projectDir}/src/main/java, ${project.projectDir}/src/main/kotlin"
def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)

jacoco {
    version = "0.7.9"
    toolVersion = "0.7.9"
}

android {
    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}

task jacocoTestReport1(type: JacocoReport, dependsOn: "test") {
    group = "Reporting"
    description = "Generating Jacoco coverage reports"

    reports {
        xml.enabled = true
        html.enabled = true
        csv.enabled = true
        xml.destination file("$reportsDir/jacoco/jacocoTestReport.xml")
        html.destination file("$reportsDir/jacoco/jacoco.html")
        csv.destination file("$reportsDir/jacoco/jacocoTestReport.csv")
    }
    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree], [kotlinDebugTree])
    executionData = fileTree(dir: buildDir, includes: ['**/*.exec', '**/*.ec'])
}

//sonarqube
sonarqube {
    properties {
        // Update your android version
        def libraries = project.android.sdkDirectory.getPath() + "/platforms/android-23/android.jar"
        if (project.plugins.hasPlugin('com.android.application')) {
            "build/intermediates/exploded-aar/**/classes.jar"
        }

        property "sonar.verbose", true
        property "sonar.login", "admin"
        property "sonar.password", "Simform.321"
        property "sonar.sourceEncoding", "UTF-8"

        property "sonar.issuesReport.html.enable", "true"
        property "sonar.issuesReport.console.enable", "true"

        property "detekt.sonar.kotlin.config.path", "$qualityConfigDir/detekt/detekt.yml"

        property "sonar.sources", "src/main/kotlin"

        property "sonar.binaries", "build"
        property "sonar.libraries", libraries

        property "sonar.java.binaries", "build"
        property "sonar.java.libraries", libraries

        property "sonar.jacoco.reportPaths", "build/jacoco/testDebugUnitTest.exec"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.junit.reportsPaths", "build/test-results/Debug"
        property "sonar.android.lint.report", "build/outputs/lint-results.xml"
    }
}

project.parent.tasks["sonarqube"].dependsOn project.name + ":jacocoTestReport1"

//Command
preBuild.dependsOn('checkstyle')
assemble.dependsOn('lint')
check.dependsOn 'checkstyle', 'findbugs', 'pmd', 'lint', 'ktlint',
    'ktlintFormat', 'spotlessApply', 'spotlessCheck', 'detekt'
